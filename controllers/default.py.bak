# -*- coding: utf-8 -*-
# -------------------------------------------------------------------------
# This is a sample controller
# this file is released under public domain and you can use without limitations
# -------------------------------------------------------------------------

@auth.requires_login()
def index():
    if request.args(1) and request.args(1) == 'new': redirect(URL('nuevo_expte'))
    db.case_file.id.readable=False
    db.case_file.id.writable=False
    db.case_file_history.id.readable=False
    db.case_file_history.id.writable=False
    db.case_file_history.case_file_id.readable=False
    db.case_file_history.case_file_id.writable=False
    db.case_file_history.case_file_egress.default = request.now
    db.case_file_child.case_file_id.readable=False
    db.case_file_child.case_file_id.writable=False
    db.case_file_child.id.readable=False
    db.case_file_child.id.writable=False

    create=False
    deletable=False
    editable=False
    csv=False

    if auth.has_membership("admin"):
        create=True
        deletable=True
        editable=True
        csv=True
    elif auth.has_membership("read_only"):
        pass
    elif auth.has_membership("write_only"):
        create=True
        deletable=False
        editable=True
        csv=False
    else:
        pass

    form = SQLFORM.smartgrid(db.case_file,
        create=create,
        deletable=deletable,
        editable=editable,
        csv=csv,
        orderby=dict(
            case_file=~db.case_file.id,
            case_file_history=~db.case_file_history.id,
            case_file_child=~db.case_file_child.id,
        ),
        breadcrumbs_class='breadcrumb',
        links_in_grid=False,
        advanced_search=False,
        showbuttontext=False,
    )
    return dict(form=form)


def nuevo_expte():
    form = SQLFORM.factory(db.case_file, db.case_file_history)
    if form.accepts(request.vars):
        case_file_id = db.case_file.insert(**db.case_file._filter_fields(form.vars))
        db.case_file_history.insert(**db.case_file_history._filter_fields(form.vars))
        redirect(URL('index', args=['case_file','view','case_file', case_file_id], user_signature=True))
    return dict(form=form)

def case_file_history():
    db.case_file.id.readable=False
    db.case_file.id.writable=False
    db.case_file_history.id.readable=False
    db.case_file_history.id.writable=False
    db.case_file_history.case_file_id.readable=False
    db.case_file_history.case_file_id.writable=False
    db.case_file_history.case_file_ingress.represent = lambda id, row: CAT(SPAN(I(_class='fa fa-arrow-down'), _class='badge badge-success'), '%s' %row.case_file_ingress)
    db.case_file_history.case_file_egress.represent = lambda id, row: CAT(SPAN(I(_class='fa fa-arrow-up'), _class='badge badge-danger'), '%s' %row.case_file_egress)
    form = SQLFORM.smartgrid(
        db.case_file,
        searchable=False,
        showbuttontext=False,
        csv=False,
        user_signature=False,
        orderby=~db.case_file_history.id,
        formname='case_file_history')
    return dict(form=form)

# ---- API (example) -----
@auth.requires_login()
def api_get_user_email():
    if not request.env.request_method == 'GET': raise HTTP(403)
    return response.json({'status':'success', 'email':auth.user.email})

# ---- Smart Grid (example) -----
@auth.requires_membership('admin') # can only be accessed by members of admin groupd
def grid():
    response.view = 'generic.html' # use a generic view
    tablename = request.args(0)
    if not tablename in db.tables: raise HTTP(403)
    grid = SQLFORM.smartgrid(db[tablename], args=[tablename], deletable=False, editable=False)
    return dict(grid=grid)

# ---- Embedded wiki (example) ----
def wiki():
    auth.wikimenu() # add the wiki to the menu
    return auth.wiki() 

# ---- Action for login/register/etc (required for auth) -----
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())

# ---- action to server uploaded static content (required) ---
@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)
